#!/usr/bin/env nextflow



// pipeline input parameters                                                                                           

params {

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// commandline /////////////////////////////////////////////	

	// to run the pipeline, first, activate the nextflow environment:
	// e.g. conda actiate nf-env

	// There are two modes in the pipeline. 
	// 1. running clustering per sample (default setting which is for analysis purpose)
	// 2. using all samples at once (for building catalog purpose)
	
	// 1. clustering per sample
		// if you dont want to do any analysis: 
			// nextflow run main.nf -profile slurm -resume --sample_type "mouse"
	
		// if you want to do analysis but not (gene_coverage, cell type specific and overlap analysis): 
			// nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" 
		
		// if you want to do analysis including cell type specific analysis: 
			// nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes"  --cell_type_analysis "yes"
		
		// if you want to do analysis including overlap analysis: 
			// nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes"  --overlap "yes"
		
		// if you want to do analysis including gene coverage analysis: 
			// nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" --g_coverage "yes"
		
		// if you want to do all analyses: 
		// nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" --cell_type_analysis "yes" --overlap "yes" --g_coverage "yes"

		// Note: 
			// Any combinations of these analyses can be done as long as you have corresponding data.
			// To do cell type specific analysis: need cell type annotation metadata and you need to specify type1 and type2 parameter in config file, to compare between type1 and type 2 cells. 
			// To do overlap: need a pre-exisitng catalog in bed format.
			// To do gene coverage: need GX tags per each read in a bam file.

		// if you want to run the pipeline on a background:
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" --overlap "yes" 
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" --cell_type_analysis "yes" --overlap "yes"
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" --cell_type_analysis "yes" --overlap "yes" --g_coverage "yes"
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "human" --analysis "yes"
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "human" --analysis "yes" --overlap "yes"
	
	// 2. running clustering on whole samples (for building catalog)
		// If you want to use all samples at once use parameter all_samples "yes"
		// For example: 
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "mouse" --all_samples "yes" 
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "human" --all_samples "yes"
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "human" --analysis "yes" --all_samples "yes"
			// nohup nextflow run main.nf -profile slurm -resume --sample_type "mouse" --analysis "yes" --all_samples "yes"
		
		// Note:
			// Analysis is minimized because we do quality check in "per sample" mode.
			// Analysis includes only ATGC frequency plot and motif frequency plot.

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// VARIABLES /////////////////////////////////////////////	
	
	// ${projectDir} == "/scicore/home/zavolan/moon0000/SCINPAS/src" (where your main.nf script is located)
	// .. means go one directory up
	
	folder_template = "${projectDir}/.."
	
	version = "v1.0.2"
	
	basic_cores = 5
	heavy_cores = 20
	heavier_cores = 30
	super_heavy_cores = 50
	
	// initialized empty but it will be overwritten by the nextflow command. (Priority always given to the input command line)
	// i.e. nextflow run main.nf -profile slurm -resume --sample_type "mouse"
	sample_type = ""

	// in the process, it will be concatenated with species and gtf/fasta.
	// e.g. gtf_fasta_location_template/mouse/genes.gtf
	// e.g. gtf_fasta_location_template/mouse/genome.fa
	gtf_fasta_location_template = "${projectDir}/../data/"
	// need to use gtf, genome_fasta and catalog of the correct species
	gtf = "genes.gtf"
	genome_fasta = "genome.fa"
	catalog = "atlas.clusters.2.0.GRCm38.96.bed.gz"

	// result folders (relevant for all samples mode)
	organ_metadata_dir = 
	// result or data folder name (relevant for per sample mode)
	//result_folder = "tabula_muris"
	//result_folder = "immune"
	//result_folder = "spermatocyte"
	//result_folder = "blood"
	//result_folder = "skin"
	//result_folder = "liver"
	//result_folder = "heart"
	//result_folder = "kidney"
	//result_folder = "pancreas"
	//result_folder = "bone"
	//result_folder = "lung"
	result_folder = "breast"
	// whether or not do statistical analysis
	analysis = ""

	// whether or not perform cell type specific analysis.
	cell_type_analysis = ""

	// whether or not compute % overlap between our pA cluster and poly overlap_catalog_figure
	overlap = ""

	// whether or not compute gene gene coverage. (There are some data which do not have GX tag)
	g_coverage = ""

	type1 = "naive_tcell"
	type2 = "activated_tcell"
	//type1 = "spermatocytes"
	//type2 = "elongating_spermatids"

	out_template = "cellType_annotation"
	split_cell_type_script = "${projectDir}/split_cell_type_nextflow.py"

	// use fixed cleavage site
	use_fc = 1

	// use all samples for building catalog
	all_samples = ""

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// MOUSE DATA /////////////////////////////////////////////	
	mouse_chromosomes = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19, "X", "Y"]

	mouse_input_dir = "${projectDir}/../data/mouse/${result_folder}/10X*.bam"
	
	mouse_negative_control_dir = "${projectDir}/../data/mouse/${result_folder}/*UmiDedup.bam"
	mouse_negative_control_raw = "${projectDir}/../data/mouse/${result_folder}/*UmiRaw.bam"

	mouse_cell_metadata = "${projectDir}/../data/mouse/cell_type_annotations_${result_folder}.csv"

	// which organs do we cover
	mouse_organs = "${folder_template}/data/mouse/organs_subset.csv"
	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// HUMAN DATA /////////////////////////////////////////////	
	human_chromosomes = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,"X","Y"]

	human_input_dir = "${projectDir}/../data/human/${result_folder}/10X*.bam"
	
	human_negative_control_dir = "${projectDir}/../data/human/${result_folder}/*UmiDedup.bam"
	human_negative_control_raw = "${projectDir}/../data/human/${result_folder}/*UmiRaw.bam"

	human_cell_metadata = "${projectDir}/../data/human/cell_type_annotations_${result_folder}.csv"
	
	// which organs do we cover
	human_organs = "${folder_template}/data/human/sample_organ_total_alter.csv"
	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// common /////////////////////////////////////////////
	
	find_exons_genes_script = "${projectDir}/get_exons_genes_alter_nextflow.py"
	find_terminal_exons_script = "${projectDir}/find_terminal_exons_nextflow.py"
    filter_terminal_exons_script = "${projectDir}/filter_further_terminal_exons_nextflow.py"

	genes_bed_out = "filtered_genes.bed"
	exons_bed_out = "filtered_exons.bed"
	terminal_exons_out = "terminal_exons.bed"
	further_filtered_terminal_exons_out = "further_filtered_terminal_exons.bed"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// trimming_and_deduplication /////////////////////////////////////////////
			
	dedup_out_name_prefix = "deduplicated_chr"
	split_out_name_prefix = "splitted_chr"
	span_threshold = 5
	dedup_script = "${projectDir}/dedup_nextflow.PY"

	bam_after_fixation = "fixed_dedup_full.bam"
	bam_after_fixation_alter = "fixed_dedup"
	fix_softclipped_script = "${projectDir}/fix_softclipped_advanced_nextflow.py"
	fix_softclipped_alter_script = "${projectDir}/fix_softclipped_final_nextflow.py"

	trim_neg_control_script = "${projectDir}/trim_negative_control_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// span_distribution /////////////////////////////////////////////

	//name teamplte for negative contorls (splitted by chromosomes)

	raw_span = "raw_span"
	dedup_span = "dedup_span"
	split_span = "split_span"
	span_script = "${projectDir}/span_alter_nextflow.py"

	raw_span_hist = "span_distribution_before_dedup"
	dedup_span_hist = "span_distribution_after_dedup"
	split_span_hist = "span_distribution_after_split"

	span_histogram_script = "${projectDir}/span_histogram_alter_nextflow.py"

	raw_negative_ctrl_template = "RawNegative_ctrl_reads"
	dedup_negative_ctrl_template = "DedupNegative_ctrl_reads"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// get_polyA /////////////////////////////////////////////

	out_polyA = "all_polyAFull"
	out_polyA_partial = "all_polyAPartial"
	out_polyA_partial_all_samples = "allSamples_polyA"
	
	out_non_polyA = "non_polyAFull"
	out_non_polyA_partial = "non_polyAPartial"

	out_polyA_control = "all_polyAFullControl"
	out_polyA_partial_control = "all_polyAPartialControl"
	
	out_non_polyA_control = "non_polyAFullControl"
	out_non_polyA_partial_control = "non_polyAPartialControl" 

	out_dedup_partial_control = "dedup_ControlNormalChrOnly"

	// threshold to be polyA
	// percentage threshold of "A" in the softclipped region
	polyA_percentage_threshold = 80
	// length threshold of the softclipped region.
    length_threshold = 5

	getPolyA_advanced_script = "${projectDir}/get_polyA_reads_final_nextflow.py"
	getPolyA_advanced_alter_script = "${projectDir}/get_polyA_reads_final_advanced_nextflow.py"
	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// bed clustering /////////////////////////////////////////////

	polyA_unique_cs_bed_sample = "all_polyA_cs_sample.bed"
	polyA_unique_cs_beds_all_samples = "all_polyA_cs_allSamples.bed"
	polyA_unique_cs_bed_control = "all_polyA_cs_control.bed"

	non_polyA_unique_cs_bed_sample = "all_non_polyA_cs_sample.bed"
	non_polyA_unique_cs_bed_control = "all_non_polyA_cs_control.bed"

	dedup_unique_cs_bed_control = "dedup_cs_control.bed"
	
	merge_bed_script = "${projectDir}/get_merge_bed_nextflow.py"
	get_polyA_unique_cs_script = "${projectDir}/get_polyA_unique_cs_nextflow.py"
	
	sample_cluster_out = "sample_polyA_cluster_out.bed"
	all_samples_cluster_out = "Allsamples_polyA_cluster_out"
	
	control_cluster_out = "control_polyA_cluster_out.bed"
	
	sample_nonpolyA_cluster_out = "sample_non_polyA_cluster_out.bed"
	control_nonpolyA_cluster_out = "control_non_polyA_cluster_out.bed"

	control_dedup_cluster_out = "control_dedup_cluster_out.bed"

	cluter_up = 25
	cluster_down = 25
	num_cores_clustering = 20
	cluster_pas_script = "${projectDir}/cluster_pas_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// classification (bed, bam) /////////////////////////////////////////////

	// name template of intermediate or final classes (beds, bams)

	all_genic_template = "all_genic"
	all_genic_control_template = "all_genic_control"
	all_genic_all_samples = "all_genic_all_samples"

	intergenic_template = "polyA_intergenic"
	intergenic_control_template = "polyA_intergenic_control"
	intergenic_all_samples = "polyA_intergenic_all_samples"

	all_exonic_template = "all_exonic"
	all_exonic_control_template = "all_exonic_control"
	all_exonic_all_samples = "all_exonic_all_samples"

	intronic_template = "polyA_intronic"
	intronic_control_template = "polyA_intronic_control"
	intronic_all_samples = "polyA_intronic_all_samples"

	exonic_template = "polyA_exonic"
	exonic_control_template = "polyA_exonic_control"
	exonic_all_samples = "polyA_exonic_all_samples"

	te_template = "polyA_TE"
	te_control_template = "polyA_TE_control"
	te_all_samples = "polyA_TE_all_samples"
	
	below_template = "polyA_TE_annotated"
	above_template = "polyA_TE_unannotated"

	filtered_te_template = "polyA_filtered_TE"

	non_te_template ="non_TE"
	non_te_e_template = "non_TE_E"
	non_te_e_i_template = "non_TE_E_I"
	non_te_e_i_intergenic_template = "non_TE_E_I_INTERGENIC"
	
	non_annotated_template = "non_annotated"
	non_annotated_unannotated_template = "non_annotated_unannotated"

	non_te_control_template ="non_TE_control"
	non_te_e_control_template = "non_TE_E_control"
	non_te_e_i_control_template = "non_TE_E_I_control"
	non_te_e_i_intergenic_control_template = "non_TE_E_I_INTERGENIC_control"

	classify_script = "${projectDir}/classify_bam_alter_nextflow.py"

	// distance threshold (in bp) for splitting polyA reads mapping to terminal exons to 2 categories (annotated, unannotated)
	distance_threshold = 100

	isolate_pA_T_bed_script = "${projectDir}/isolate_polA_terminal_bed_nextflow.py"
	classify_below_above_script = "${projectDir}/classify_below_above_alter_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// get_A_freq_in_nonsoftclipped_reads /////////////////////////////////////////////
	
	no_softclipped_reads = "non_softclipped_reads_full.bam"

	get_no_softclipped_script = "${projectDir}/get_no_softclipped_reads_nextflow.py"
	get_avg_a_freq_script = "${projectDir}/get_avg_freq_A_nextflow.py"
	avg_a_freq_csv = "avg_A_freq.csv"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// num_reads_per_class /////////////////////////////////////////////

	counts_raw = "counts_raw.csv"
	counts_dedup = "counts_dedup.csv"
	counts_dedup_softclipped = "counts_dedup_softclipped.csv"
	counts_nonpolyA = "counts_nonpolyA.csv"
	counts_internal_p = "counts_internal_p.csv"
	counts_polyA = "counts_polyA.csv"
	counts_polyAT = "counts_polyA_terminal.csv"
	counts_annotated = "counts_annotated.csv"
	counts_unannotated = "counts_unannotated.csv"
	counts_intronic = "counts_intronic.csv"
	counts_intergenic = "counts_intergenic.csv"
	counts_exonic = "counts_exonic.csv"
	
	// do not change name in *_type
	raw_type = "original"
	dedup_type = "deduplicated"
	dedup_softclipped_type = "softclipped"
	nonpolyA_type = "non-PATR"
	polyA_type = "PATR"
	polyAT_type = "TE"
	annotated_type = "ATE"
	unannotated_type = "UTE"
	intronic_type = "I"
	intergenic_type = "IG"
	exonic_type = "NTE"
	
	barchart_output = "counts_bar_chart_full"
	
	get_count_script = "${projectDir}/get_count_alter_nextflow.py"
	get_softclip_count_script = "${projectDir}/get_num_softclipped_nextflow.py"
	get_count_split_script = "${projectDir}/split_counts_csv_nextflow.py"
	get_barchart_script = "${projectDir}/get_count_barchart_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// distance /////////////////////////////////////////////
	
	// main output. distance csv file. will be used to get histogram of d(read, terminal_exon)
	distance_output = "distances.csv"
	
	combined_negative_control_distance_output = "combined_negative_control_distance.csv"

	get_distance_final_script = "${projectDir}/get_distance_final_advanced_nextflow.py"
	get_histogram_final_script = "${projectDir}/get_histogram_final_advanced_nextflow.py"

	distance_histogram_file_name = "distance_histogram"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// ATGC_plot /////////////////////////////////////////////
		
	//ATGC plot output name
	all_polyA_ATGC_out = "frequency_plot_all_polyA"
	unannotated_ATGC_out = "frequency_plot_unannotated"
	annotated_ATGC_out = "frequency_plot_annotated"
	intronic_ATGC_out = "frequency_plot_intronic"
	intergenic_ATGC_out = "frequency_plot_intergenic"
	non_polyA_ATGC_out = "frequency_plot_nonpolyA"
	internal_priming_ATGC_out = "frequency_plot_internal_priming"
	polyA_exonic_ATGC_out = "frequency_plot_exonic"
	control_ATGC_out = "frequency_plot_control"
	nosoftclip_ATGC_out = "frequency_plot_nosoftclip"
	
	window_size = 50
	plot_frequencies_script = "${projectDir}/plot_frequencies_final_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// motif_freq_plot /////////////////////////////////////////////

	// number indicates which read type we are dealing with.
	// if 5, it is non_polyA reads
	all_polyA_annotated = 12
	above_annotated = 5
	below_annotated = 4
	intronic_annotated = 7
	intergenic_annotated = 8
	polyA_exonic_annotated = 10
	control_annotated = 11
	non_polyA_annotated = 6
	no_softclipped_annotated = 13
	te_annotated = 14

	motif_search_out_template_te = "te"
	motif_search_out_template_annotated = "annotated"
	motif_search_out_template_unannotated = "unannotated"
	motif_search_out_template_nonpolyA = "nonpolyA"
	motif_search_out_template_intergenic = "intergenic"
	motif_search_out_template_intronic = "intronic"
	motif_search_out_template_exonic = "exonic"
	motif_search_out_gtf = "gtf"
	motif_search_out_polyA = "PolyA"

	// # of basepairs you go upstream of the cleavage site
	motif_search_window = 40

	// # of basepairs you go downstream of the cleavage site for motif search
	// if 0, you dont go downstream of the cleavage site
	// if -20, you go 20bp downstream of the cleavage site
	down_limit = -20

	motif_info_dir = "${projectDir}/../data/canonical_motives.csv"
	search_motif_script = "${projectDir}/search_motif_advanced_final_nextflow.py"	
	gtf_search_motif_script = "${projectDir}/search_motif_annotated_alter_nextflow.py"

	motif_order_outname = "combined_motif_orders.csv"
	split_motif_order_script = "${projectDir}/split_motif_orders_csv_nextflow.py"

	compute_motif_score_advanced_script = "${projectDir}/compute_score_for_subsetting_advanced_nextflow.py"
	
	combined_motif_scores = "polyA_combined_motif_scores.csv"
	
	total_merged_motif_orders = "total_merged_motif_orders.csv"
	total_merged_motif_scores = "total_merged_motif_scores.csv"

	polyA_motif_score = "polyA_motif_score_barchart"
	polyA_motif_score_script = "${projectDir}/get_barchart_polyA_motif_score_nextflow.py"

	sizeSoftclipped_out = "size_softclipped_distribution"
	get_softclipped_script = "${projectDir}/get_softclipped_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// num_polyA /////////////////////////////////////////////

	cluster_threshold = 2
	get_numA_polyA_script = "${projectDir}/get_num_polyA_sites_nextflow.py"

	allPAS_num_polyA_csv = "allPAS_num_polyA.csv"
	te_num_polyA_csv = "TE_num_polyA.csv"
	above_num_polyA_csv = "unannotated_num_polyA.csv"
	below_num_polyA_csv = "annotated_num_polyA.csv"
	intronic_num_polyA_csv = "intronic_num_polyA.csv"
	intergenic_num_polyA_csv = "intergenic_num_polyA.csv"
	exonic_num_polyA_csv = "exonic_num_polyA.csv"
	control_num_polyA_csv = "control_num_polyA.csv"
	
	combined_all_PAS_num_polyA_csv = "combined_all_PAS_num_polyA.csv"
	combined_above_num_polyA_csv = "combined_above_num_polyA.csv"
	combined_below_num_polyA_csv = "combined_below_num_polyA.csv"
	combined_intronic_num_polyA_csv = "combined_intronic_num_polyA.csv"
	combined_intergenic_num_polyA_csv = "combined_intergenic_num_polyA.csv"
	combined_exonic_num_polyA_csv = "combined_exonic_num_polyA.csv"
	combined_control_num_polyA_csv = "combined_control_num_polyA.csv"

	all_combined_num_polyA_csv = "all_combined_num_polyA.csv"
	
	fuse_numPAS_motifscore_script = "${projectDir}/fuse_numPAS_motifScore_nextflow.py"
	numPAS_motifScore_csv = "numPAS_motifScore.csv"

	get_barchart_numpolyA_script = "${projectDir}/get_barchart_numpolyA_nextflow.py"
	num_polyA_barchart = "combined_num_polyA_barchart"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// gene_coverage /////////////////////////////////////////////
	
	read_count_threshold = 2

	gene_coverage_script = "${projectDir}/get_gene_coverage_alter_nextflow.py"
	dedup_gene_coverage_csv = "dedup_coverage.csv"
	polyA_gene_coverage_csv = "gene_coverage.csv"
	combined_dedup_gene_coverage_csv = "combined_dedup_gene_coverage.csv"
	combined_polyA_gene_coverage_csv = "combined_polyA_gene_coverage.csv"

	total_num_genes_script = "${projectDir}/total_num_genes_nextflow.py"
	total_num_genes_csv = "total_num_genes.csv"
	
	get_barchart_gene_coverage_script = "${projectDir}/get_barchart_gene_coverage_nextflow.py"
	geneCoverage_barchart = "combined_geneCoverage_barchart"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// PWM_logo /////////////////////////////////////////////

	softclip_pwm_logo = "softclip_pwm_logo"
	softclip_pwm_logo_script = "${projectDir}/softclip_PWM_nextflow.py"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// cell_type_specific, merged_cell_type //////////////////////////////////

	out_polyA_type1 = "all_polyA_reads_${type1}"
	out_non_polyA_type1 = "nonpolyA_reads_${type1}"

	out_polyA_type2 = "all_polyA_reads_${type2}"
	out_non_polyA_type2 = "nonpolyA_reads_${type2}"

	polyA_unique_cs_bed_type1 = "all_polyA_cs_${type1}.bed"
	polyA_unique_cs_bed_type2 = "all_polyA_cs_${type2}.bed"	

	polyA_cluster_out_type1 = "${type1}_polyA_cluster_out.bed"
	polyA_cluster_out_type2 = "${type2}_polyA_cluster_out.bed"

	get_type1_type2_d_script = "${projectDir}/get_type1_type2_distance_nextflow.py"
	type1_type2_distance_csv = "type1_type2_distance.csv"	

	get_type1_type2_dScatter_script = "${projectDir}/get_t1_t2_contour_nextflow.py"
	type1_type2_scatter = "type1_type2_"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// overlap_with_catalog //////////////////////////////////

	num_cores_overlap = 20
	
	get_overlap_script = "${projectDir}/get_overlap_nextflow.py"
	overlap_catalog_figure = "overlap_with_catalog"

	get_top_overlap_script = "${projectDir}/get_top_overlap_nextflow.py"
	top_overlap_catalog_figure = "top_overlap_with_catalog"

	//////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////// catalog //////////////////////////////////

	mapped_unmapped = "num_mapped_unmapped_reads_all_samples.csv"
	swarm_script = "${projectDir}/fastqc_swarm_nextflow.py"
	swarm_plot_out = "median_of_median_sequence_quality_swarm_polt.png"
	sequence_quality_csv = "median_of_median_sequence_quality.csv"
	seq_qual_threshold = 30

	split_by_direction_script = "${projectDir}/split_by_direction_nextflow.py"
	grouped_by_out = "all_samples_grouped_unique_cs"
	grouped_by_script = "${projectDir}/groupby_beds_alter_nextflow.py"

	modified_unique_cs = "all_samples_modified_unique_cs"
	cluster_pas_alter_script = "${projectDir}/cluster_pas_alter_nextflow.py"

	organ_specific_cs_out = "organ_specific_modified_cs" 
	organ_specific_pas_out = "filtered_organ_specific_PAS"
	pas_split_by_organ_script = "${projectDir}/left_join_nextflow.py"

	merged_organ_bed_out = "merged_PAS.bed"
}

//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// profiles /////////////////////////////////////////////

profiles {
	slurm{
		process.executor = "slurm"
		singularity.enabled = true
		singularity.autoMounts = true
	}

	singularity{
		singularity.enabled = true
		singularity.autoMounts = true
	}

	docker{
		docker.enabled = true
	}
}

//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// process /////////////////////////////////////////////

process {
	//before memory = 80.GB and cpus = 40
    memory = 5.GB
    cpus = params.basic_cores
    time = "2h"
    
    withLabel: "gcc" {
        container = "gcc:latest"
    }

    withLabel: "bash" {
        container = "debian:stable-slim"
    }

    withLabel: "samtools" {
        // this converts from docker to singularity automatically by nextflow
        // original command is: docker pull zavolab/samtools:1.8
        // container = "docker://zavolab/samtools:1.8"
        // container = "biocontainers/samtools:v1.9-4-deb_cv1"
		container = "docker://staphb/samtools:1.15"
    }

    withLabel: "bedtools" {
        container = "biocontainers/bedtools:v2.27.1dfsg-4-deb_cv1"
    }

    withLabel: "custom_python" {
        //currently just  python 3.9.12 . It needs to be extended to contain all dependencies based on python 3.9.12
        //container = "docker://zavolab/polcat_python:v1.0.7"
		container = "docker://zavolab/scinpas_python:v1.0.6"
    }

	withLabel: "fastqc" {
		container = "docker://staphb/fastqc:0.12.1"
	}

    withLabel: "middle_memory" {
        memory = 80.GB
		time = "6h"
    }

    withLabel: "heavy_memory" {
        memory = 200.GB
		time = "6h"
    }

    withLabel: "super_heavy_memory" {
        memory = 250.GB
		time = "6h"
    }

    withLabel: "heavy_computation" {
        memory = 120.GB
        cpus = params.heavy_cores
		clusterOptions = "--time=12:00:00 --qos=1day"
		//time = "6h"
    }

    withLabel: "super_heavy_computation" {
        memory = 190.GB
        cpus = params.super_heavy_cores
		clusterOptions = "--time=24:00:00 --qos=1day"
    }

	withLabel: "short_time" {
	time = "6h"
    }

	withLabel: "middle_time" {
	clusterOptions = "--time=12:00:00 --qos=1day"
    }

	withLabel: "long_time" {
	clusterOptions = "--time=24:00:00 --qos=1day"
    }
	
	withLabel: "very_long_time" {
	clusterOptions = "--time=168:00:00 --qos=1week"
    }
}
